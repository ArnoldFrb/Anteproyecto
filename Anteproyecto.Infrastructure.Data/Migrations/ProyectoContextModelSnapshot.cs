// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Anteproyecto.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ProyectoContext))]
    partial class ProyectoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Anteproyecto.Domain.Entities.Convocatoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CargarProyectos")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FechaCierre")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Convocatorias");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.Evaluacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comentario")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Estado")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Evaluacion");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.Obsercion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comentario")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProyectoId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProyectoId");

                    b.ToTable("Obsercion");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.Proyecto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AsesorMetodologicoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AsesorTematicoId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EvaluacionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nombre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Resumen")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AsesorMetodologicoId");

                    b.HasIndex("AsesorTematicoId");

                    b.HasIndex("EvaluacionId");

                    b.ToTable("Proyectos");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Apellidos")
                        .HasColumnType("TEXT");

                    b.Property<string>("Contraseña")
                        .HasColumnType("TEXT");

                    b.Property<string>("Correo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nombres")
                        .HasColumnType("TEXT");

                    b.Property<string>("NumeroIdentificacion")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.AsesorMetodologico", b =>
                {
                    b.HasBaseType("Anteproyecto.Domain.Entities.Usuario");

                    b.HasDiscriminator().HasValue("AsesorMetodologico");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.AsesorTematico", b =>
                {
                    b.HasBaseType("Anteproyecto.Domain.Entities.Usuario");

                    b.HasDiscriminator().HasValue("AsesorTematico");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.Obsercion", b =>
                {
                    b.HasOne("Anteproyecto.Domain.Entities.Proyecto", null)
                        .WithMany("Obsercion")
                        .HasForeignKey("ProyectoId");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.Proyecto", b =>
                {
                    b.HasOne("Anteproyecto.Domain.Entities.AsesorMetodologico", "AsesorMetodologico")
                        .WithMany()
                        .HasForeignKey("AsesorMetodologicoId");

                    b.HasOne("Anteproyecto.Domain.Entities.AsesorTematico", "AsesorTematico")
                        .WithMany()
                        .HasForeignKey("AsesorTematicoId");

                    b.HasOne("Anteproyecto.Domain.Entities.Evaluacion", "Evaluacion")
                        .WithMany()
                        .HasForeignKey("EvaluacionId");

                    b.Navigation("AsesorMetodologico");

                    b.Navigation("AsesorTematico");

                    b.Navigation("Evaluacion");
                });

            modelBuilder.Entity("Anteproyecto.Domain.Entities.Proyecto", b =>
                {
                    b.Navigation("Obsercion");
                });
#pragma warning restore 612, 618
        }
    }
}
